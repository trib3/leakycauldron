version: 2.1
orbs:
  release: trib3/release@2.0.2

jobs:
  security_checks:
    docker:
    - image: cimg/openjdk:17.0
    working_directory: ~/repo
    steps:
      # get code
      - checkout
      - run:
          name: Install Trivy
          command: |
            sudo apt install apt-transport-https gnupg lsb-release
            echo $TRIVY_PGP_KEY | sed 's/\$/\n/g' | sudo apt-key add -
            echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt update
            sudo apt install trivy
      - run:
          name: Vulnerability check
          command: |
            make vuln-check
            if [[ -s ./vuln-scan.txt ]]; then
              echo -e "[WARNING]Vulnerabilities have been found..."
              cat ./vuln-scan.txt
              # TODO: exit 1 or send some notification to slack about vulnerabilities
            else 
              echo -e "[INFO]Vulnerabilities have not been found, everything looks fine"
            fi
      - run:
          name: Secret check
          command: |
            make secret-check
            if [[ -s ./secret-scan.txt ]]; then
              echo -e "[WARNING]Secrets have been found..."
              cat ./secret-scan.txt
              # exit 1
            else 
              echo -e "[INFO]Secrets have not been found, everything looks fine"
            fi
      - run:
          name: License check
          command: |
            make license-check
            if [[ -s ./license-scan.txt ]]; then
              echo -e "[WARNING]Prohibited licenses have been found..."
              cat ./license-scan.txt
              # exit 1
            else
              echo -e "[INFO]Prohibited licenses have not been found, everything looks fine"
            fi

  build:
    machine:
      image: default

    working_directory: ~/repo
    environment:
      JAVA_TOOL_OPTIONS: -XX:MaxRAM=2g

    steps:
      # get code
      - checkout
      # handle dependency caching and run build
      - restore_cache:
          keys:
            - v6-dependencies-{{ .Branch }}-{{ .Revision }}
            - v6-dependencies-{{ .Branch }}
            - v6-dependencies-
      - run:
          name: Setup GPG
          command: |
            echo $GPG_KEY | sed 's/\$/\n/g' |  gpg --import
      - run:
          name: Set JAVA_HOME for mvnw commands
          command: echo 'export JAVA_HOME=`java -XshowSettings:properties -version 2>&1 |grep java.home | sed "s/.*java\.home = //"`' >> "$BASH_ENV"
      - run:
          name: Maven Setup
          command: |
            ./mvnw --version
            mkdir -p ~/.m2
            echo $MAVEN_SETTINGS_XML > ~/.m2/settings.xml
            export MAVEN_OPTS="--add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED"
            if [ "$CIRCLE_BRANCH" = "main" ]; then
                set +o pipefail # it's ok to keep going if grep doesn't match anything 
                REPOIDS=`./mvnw org.sonatype.plugins:nexus-staging-maven-plugin:1.6.8:rc-list -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/   |grep comtrib3 |awk '{print $2}'`
                set -o pipefail
                if [ -n "$REPOIDS" ]; then
                    echo "Cleaning existing $REPOIDS"
                    for REPOID in $REPOIDS; do 
                    ./mvnw org.sonatype.plugins:nexus-staging-maven-plugin:1.6.8:rc-drop -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/ -DstagingRepositoryId=$REPOID -DstagingProgressTimeoutMinutes=30
                    done
                fi
            fi
            export MAVEN_OPTS=""
            cd build-resources && BASE_VERSION=$(../mvnw -q  -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec|sed 's/-SNAPSHOT.*//') && cd ..
            if [ "$CIRCLE_BRANCH" = "main" ]; then
              NEW_PROJECT_VERSION=${BASE_VERSION}.${CIRCLE_BUILD_NUM}
            else
              NEW_PROJECT_VERSION=${BASE_VERSION}-${CIRCLE_BRANCH}-SNAPSHOT
            fi
            for i in build-resources parent-pom; do
               cd $i
               ../mvnw --no-transfer-progress -U org.codehaus.mojo:versions-maven-plugin:2.7:set -DgenerateBackupPoms=false -DnewVersion=${NEW_PROJECT_VERSION}
               cd ..
            done
            echo ${NEW_PROJECT_VERSION} > ~/repo/current_version.txt
      - run:
          name: Maven Build
          command: |
            if [ "$CIRCLE_BRANCH" = "main" ]; then
              ./mvnw deploy -DaltDeploymentRepository=ossrh::${MAVEN_RELEASE_REPO} --no-transfer-progress -U
            else
              ./mvnw deploy -DaltDeploymentRepository=ossrh::${MAVEN_SNAPSHOT_REPO} --no-transfer-progress -U
            fi
      - save_cache:
          paths:
            - ~/.m2
          key: v6-dependencies-{{ .Branch }}-{{ .Revision }}
      # collect test results and upload coverage
      - run: mkdir -p ~/test_results
      - run: find . -type f -regex ".*/target/surefire-reports/junitreports/.*xml" -exec cp {} ~/test_results/ \;
      - store_test_results:
          path: ~/test_results
      - store_artifacts:
          path: ~/test_results
      - run:
          name: Upload coverage report
          command: |
            echo $CODECOV_GPG_KEY | sed 's/\$/\n/g' | gpg --import
            curl https://uploader.codecov.io/latest/linux/codecov > ~/codecov
            curl https://uploader.codecov.io/latest/linux/codecov.SHA256SUM > ~/codecov.SHA256SUM
            curl https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig > ~/codecov.SHA256SUM.sig
            cd ~
            gpg --verify codecov.SHA256SUM.sig codecov.SHA256SUM
            if [ $? -ne 0 ]; then
             echo "bad signature on codecov SHA256SUM file"
             exit 1
            fi
            shasum -a 256  -c codecov.SHA256SUM
            if [ $? -eq 0 ]; then
              chmod +x ~/codecov
              cd ~/repo
              ~/codecov -t ${CODECOV_TOKEN} -v
            else
              echo "bad checksum on codecov binary"
              exit 1
            fi
      # collect docs
      - run:
          name: Collect docs
          command: |
            mkdir -p ~/docs
            for subdir in `find . -maxdepth 1 -mindepth 1 -type d`; do
              if [ -d $subdir/target/dokka ]; then
                cp -r $subdir/target/dokka ~/docs/$subdir
              fi
            done
            mkdir -p ~/docarchive
            cd ~/docs && zip -r ~/docarchive/docs.zip .
      - store_artifacts:
          path: ~/docarchive
      # collect built packages and save to workspace for deploy
      - run: mkdir -p ~/jars
      - run: find . -type f -regex ".*/target/.*jar" -exec cp {} ~/jars/ \;
      - run: find . -type f -regex ".*/target/.*zip" -exec cp {} ~/jars/ \;
      - run: find . -type f -regex ".*/target/.*asc" -exec cp {} ~/jars/ \;
      - release/prep_release:
          release_dir: ~/jars/release
          current_version: ~/repo/current_version.txt
          current_version_import: True
      - store_artifacts:
          path: ~/jars
      - persist_to_workspace:
          root: ~/
          paths:
            - jars/.
            - repo/mvnw
            - repo/.mvn/wrapper/maven-wrapper.properties

  sonar_check:
    resource_class: trib3/k8s-runner
    docker:
    - image: cimg/openjdk:17.0
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install SonarQube scanner
          command: |
            sudo apt update && sudo apt install awscli
            curl -O -L "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip"
            curl -O -L "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip.asc"
            curl -O -L "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip.md5"
            gpg --batch --keyserver hkps://keyserver.ubuntu.com --recv-keys $SONAR_PGP_KEY

            gpg --verify sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip.asc sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip
            if [ $? -ne 0 ]; then
              echo "bad signature on sonar-scanner zip file"
              exit 1
            fi

            echo "$(cat sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip.md5) sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip" | md5sum -c
            if [ $? -eq 0 ]; then
              unzip -uq sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip
              mkdir -p ${SONAR_SCANNER_HOME}
              mv sonar-scanner-${SONAR_SCANNER_VERSION}-linux/* ${SONAR_SCANNER_HOME}
            else
              echo "bad checksum on sonar-scanner zip file"
              exit 1
            fi
          environment:
            SONAR_SCANNER_VERSION: "5.0.1.3006"
            SONAR_SCANNER_HOME: "~/.sonar"
      - run:
          name: SonarQube check
          command: |
            export PATH=${SONAR_SCANNER_HOME}/bin/:${PATH}
            unset AWS_ACCESS_KEY_ID
            unset AWS_SECRET_ACCESS_KEY
            unset AWS_SESSION_TOKEN
            AWS_CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::315805068186:role/SMR=sonarqube-admin-ci --role-session-name gitlab-secretsmanager-access)
            export AWS_ACCESS_KEY_ID=$(echo $AWS_CREDENTIALS | jq .Credentials | jq -r .AccessKeyId)
            export AWS_SECRET_ACCESS_KEY=$(echo $AWS_CREDENTIALS | jq .Credentials | jq -r .SecretAccessKey)
            export AWS_SESSION_TOKEN=$(echo $AWS_CREDENTIALS | jq .Credentials | jq -r .SessionToken)
            export SONAR_SECRET=$(aws secretsmanager get-secret-value --secret-id sonarqube/admin/ci --region us-west-1)
            export SONAR_HOST_URL=$(echo $SONAR_SECRET | jq .SecretString | jq fromjson | jq -r .SONAR_HOST_URL)
            export SONAR_TOKEN=$(echo $SONAR_SECRET | jq .SecretString | jq fromjson | jq -r .SONAR_GITLAB_TOKEN)
            unset AWS_ACCESS_KEY_ID
            unset AWS_SECRET_ACCESS_KEY
            unset AWS_SESSION_TOKEN
            ${SONAR_SCANNER_HOME}/bin/sonar-scanner
          environment:
            SONAR_USER_HOME: "~/.sonar-cache"  # Defines the location of the analysis task cache
            SONAR_SCANNER_HOME: "~/.sonar"


  deploy:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Set JAVA_HOME for mvnw commands
          command: echo 'export JAVA_HOME=`java -XshowSettings:properties -version 2>&1 |grep java.home | sed "s/.*java\.home = //"`' >> "$BASH_ENV"
      - run:
          name: Complete release
          command: |
            mkdir -p ~/.m2
            cd ~/jars
            echo $MAVEN_SETTINGS_XML > ~/.m2/settings.xml
            export MAVEN_OPTS="--add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED"
            REPOID=`../repo/mvnw org.sonatype.plugins:nexus-staging-maven-plugin:1.6.8:rc-list -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/   |grep comtrib3 |awk '{print $2}'`
            ../repo/mvnw org.sonatype.plugins:nexus-staging-maven-plugin:1.6.8:rc-close -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/ -DstagingRepositoryId=$REPOID -DstagingProgressTimeoutMinutes=30
            ../repo/mvnw org.sonatype.plugins:nexus-staging-maven-plugin:1.6.8:rc-release -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/ -DstagingRepositoryId=$REPOID -DstagingProgressTimeoutMinutes=30
      - release/execute_release:
          release_dir: ~/jars/release

workflows:
  version: 2.1
  build_pipeline:
    jobs:
      - security_checks:
          context: 
            - trivy
            - nexus
      - build:
          context: terraform
          requires:
            - security_checks
      - sonar_check:
          context: 
            - sonarqube
          requires:
            - build
          filters:
            branches:
              only:
              - /^.*DEVOPS-6666.*$/
      - hold:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - main
      - deploy:
          requires:
            - hold
          filters:
            branches:
              only:
                - main
