version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:11-jdk

    working_directory: ~/repo
    environment:
      JAVA_TOOL_OPTIONS: -XX:MaxRAM=2g

    steps:
      # get code
      - checkout
      # handle dependency caching and run build
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Branch }}-{{ .Revision }}
            - v1-dependencies-{{ .Branch }}
            - v1-dependencies-
      - run:
          name: Setup GPG
          command: |
            echo $GPG_KEY | sed 's/\$/\n/g' |  gpg --import
      - run:
          name: Maven Setup
          command: |
            mkdir -p ~/.m2
            echo $MAVEN_SETTINGS_XML > ~/.m2/settings.xml
            if [ "$CIRCLE_BRANCH" = "master" ]; then
                set +o pipefail # it's ok to keep going if grep doesn't match anything 
                REPOID=`mvn org.sonatype.plugins:nexus-staging-maven-plugin:rc-list -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/   |grep comtrib3 |awk '{print $2}'`
                set -o pipefail
                if [ -n "$REPOID" ]; then
                    echo "Cleaning existing $REPOID"
                    mvn org.sonatype.plugins:nexus-staging-maven-plugin:rc-drop -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/ -DstagingRepositoryId=$REPOID
                fi
            fi
            cd build-resources && BASE_VERSION=$(mvn -q  -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec|sed 's/-SNAPSHOT.*//') && cd ..
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              NEW_PROJECT_VERSION=${BASE_VERSION}.${CIRCLE_BUILD_NUM}
            else
              NEW_PROJECT_VERSION=${BASE_VERSION}-${CIRCLE_BRANCH}-SNAPSHOT
            fi
            for i in build-resources parent-pom; do
               cd $i
               mvn versions:set -DgenerateBackupPoms=false -DnewVersion=${NEW_PROJECT_VERSION}
               cd ..
            done
      - run:
          name: Maven Build
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              mvn deploy -DaltDeploymentRepository=ossrh::${MAVEN_RELEASE_REPO} -U
            else
              mvn deploy -DaltDeploymentRepository=ossrh::${MAVEN_SNAPSHOT_REPO} -U
            fi
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ .Branch }}-{{ .Revision }}
      # collect test results and upload coverage
      - run: mkdir -p ~/test_results
      - run: find . -type f -regex ".*/target/surefire-reports/junitreports/.*xml" -exec cp {} ~/test_results/ \;
      - store_test_results:
          path: ~/test_results
      - store_artifacts:
          path: ~/test_results
      - run: bash <(curl -s https://codecov.io/bash) -t ${CODECOV_TOKEN}
      # collect docs
      - run: mkdir -p ~/docs
      - run: find . -type d -name 'dokka' -exec cp -r {} ~/docs/ \;
      - store_artifacts:
          path: ~/docs
      # collect built packages and save to workspace for deploy
      - run: mkdir -p ~/jars
      - run: find . -type f -regex ".*/target/.*jar" -exec cp {} ~/jars/ \;
      - run: find . -type f -regex ".*/target/.*zip" -exec cp {} ~/jars/ \;
      - run: find . -type f -regex ".*/target/.*asc" -exec cp {} ~/jars/ \;
      - run:
          name: Notify of new master build
          command: |
            CURRENT_VERSION=$(mvn -q  -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            git fetch --tags
            PREVIOUS_VERSION=$(git tag | sort -V | tail -n 1)
            git log --pretty=format:'* %s\r\n' ${PREVIOUS_VERSION}..HEAD | sed 's/"/\\"/g'|tr -d '\n' > ~/jars/release-notes.txt
            RELEASE_NOTES=$(cat ~/jars/release-notes.txt)
            if [ "${CIRCLE_BRANCH}" = "master" -a "${SLACK_NOTIFICATION_WEBHOOK}" != "" ]; then
              WORKFLOW_URL="https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
              curl -X POST -d "payload={\"attachments\":[{ \"mrkdwn_in\":[\"text\"], \"color\":\"#439FE0\", \"fallback\":\"Library master build notification\", \"pretext\":\"Library master build notification\", \"text\":\"*Project* \`${CIRCLE_PROJECT_REPONAME}\`\n*Branch* \`${CIRCLE_BRANCH}\`\n*Version* \`${CURRENT_VERSION}\`\nClick <$WORKFLOW_URL|here> to finalize release\nRelease Notes:\n\`\`\`\n${RELEASE_NOTES}\n\`\`\`\"}]}" ${SLACK_NOTIFICATION_WEBHOOK}
            fi
      - store_artifacts:
          path: ~/jars
      - persist_to_workspace:
          root: ~/jars
          paths:
            - .

  deploy:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - attach_workspace:
          at: ~/jars
      - run:
          name: Complete release
          command: |
            mkdir -p ~/.m2
            echo $MAVEN_SETTINGS_XML > ~/.m2/settings.xml
            REPOID=`mvn org.sonatype.plugins:nexus-staging-maven-plugin:rc-list -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/   |grep comtrib3 |awk '{print $2}'`
            mvn org.sonatype.plugins:nexus-staging-maven-plugin:rc-close -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/ -DstagingRepositoryId=$REPOID 
            mvn org.sonatype.plugins:nexus-staging-maven-plugin:rc-release -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/ -DstagingRepositoryId=$REPOID 
            CURRENT_VERSION=$(ls ~/jars/build-resources-*.pom.asc | sed 's/^.*jars\/build-resources-\(.*\)\.pom.asc$/\1/')
            RELEASE_NOTES=$(cat ~/jars/release-notes.txt)
            if [ "${GITHUB_AUTH_TOKEN}" != "" -a "${RELEASE_NOTES}" != "" ]; then
              curl -H "Authorization: bearer ${GITHUB_AUTH_TOKEN}" -X POST "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases" -X POST -d "{\"tag_name\":\"${CURRENT_VERSION}\", \"name\":\"${CURRENT_VERSION}\", \"target_commitish\":\"${CIRCLE_SHA1}\", \"body\": \"${RELEASE_NOTES}\"}"
            fi

workflows:
  version: 2
  build_pipeline:
    jobs:
      - build
      - hold:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - deploy:
          requires:
            - hold
          filters:
            branches:
              only:
                - master
