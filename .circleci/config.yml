version: 2.1
orbs:
  release: trib3/release@2.0.0

jobs:
  build:
    docker:
      - image: circleci/openjdk:11-jdk

    working_directory: ~/repo
    environment:
      JAVA_TOOL_OPTIONS: -XX:MaxRAM=2g

    steps:
      # get code
      - checkout
      # handle dependency caching and run build
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Branch }}-{{ .Revision }}
            - v1-dependencies-{{ .Branch }}
            - v1-dependencies-
      - run:
          name: Setup GPG
          command: |
            echo $GPG_KEY | sed 's/\$/\n/g' |  gpg --import
      - run:
          name: Maven Setup
          command: |
            mkdir -p ~/.m2
            echo $MAVEN_SETTINGS_XML > ~/.m2/settings.xml
            if [ "$CIRCLE_BRANCH" = "main" ]; then
                set +o pipefail # it's ok to keep going if grep doesn't match anything 
                REPOIDS=`mvn org.sonatype.plugins:nexus-staging-maven-plugin:rc-list -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/   |grep comtrib3 |awk '{print $2}'`
                set -o pipefail
                if [ -n "$REPOIDS" ]; then
                    echo "Cleaning existing $REPOIDS"
                    for REPOID in $REPOIDS; do 
                        mvn org.sonatype.plugins:nexus-staging-maven-plugin:rc-drop -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/ -DstagingRepositoryId=$REPOID
                    done
                fi
            fi
            cd build-resources && BASE_VERSION=$(mvn -q  -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec|sed 's/-SNAPSHOT.*//') && cd ..
            if [ "$CIRCLE_BRANCH" = "main" ]; then
              NEW_PROJECT_VERSION=${BASE_VERSION}.${CIRCLE_BUILD_NUM}
            else
              NEW_PROJECT_VERSION=${BASE_VERSION}-${CIRCLE_BRANCH}-SNAPSHOT
            fi
            for i in build-resources parent-pom; do
               cd $i
               mvn org.codehaus.mojo:versions-maven-plugin:2.7:set -DgenerateBackupPoms=false -DnewVersion=${NEW_PROJECT_VERSION}
               cd ..
            done
            echo ${NEW_PROJECT_VERSION} > ~/repo/current_version.txt
      - run:
          name: Maven Build
          command: |
            if [ "$CIRCLE_BRANCH" = "main" ]; then
              mvn deploy -DaltDeploymentRepository=ossrh::${MAVEN_RELEASE_REPO} -U
            else
              mvn deploy -DaltDeploymentRepository=ossrh::${MAVEN_SNAPSHOT_REPO} -U
            fi
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ .Branch }}-{{ .Revision }}
      # collect test results and upload coverage
      - run: mkdir -p ~/test_results
      - run: find . -type f -regex ".*/target/surefire-reports/junitreports/.*xml" -exec cp {} ~/test_results/ \;
      - store_test_results:
          path: ~/test_results
      - store_artifacts:
          path: ~/test_results
      - run: bash <(curl -s https://codecov.io/bash) -t ${CODECOV_TOKEN}
      # collect docs
      - run: mkdir -p ~/docs
      - run:
          name: Collect docs
          command: |
            for subdir in `find . -maxdepth 1 -mindepth 1 -type d`; do
              if [ -d $subdir/target/dokka ]; then
                cp -r $subdir/target/dokka ~/docs/$subdir
              fi
            done
      - store_artifacts:
          path: ~/docs
      # collect built packages and save to workspace for deploy
      - run: mkdir -p ~/jars
      - run: find . -type f -regex ".*/target/.*jar" -exec cp {} ~/jars/ \;
      - run: find . -type f -regex ".*/target/.*zip" -exec cp {} ~/jars/ \;
      - run: find . -type f -regex ".*/target/.*asc" -exec cp {} ~/jars/ \;
      - release/prep_release:
          release_dir: ~/jars/release
          current_version: ~/repo/current_version.txt
          current_version_import: True
      - store_artifacts:
          path: ~/jars
      - persist_to_workspace:
          root: ~/jars
          paths:
            - .

  deploy:
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - attach_workspace:
          at: ~/jars
      - run:
          name: Complete release
          command: |
            mkdir -p ~/.m2
            echo $MAVEN_SETTINGS_XML > ~/.m2/settings.xml
            REPOID=`mvn org.sonatype.plugins:nexus-staging-maven-plugin:rc-list -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/   |grep comtrib3 |awk '{print $2}'`
            mvn org.sonatype.plugins:nexus-staging-maven-plugin:rc-close -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/ -DstagingRepositoryId=$REPOID 
            mvn org.sonatype.plugins:nexus-staging-maven-plugin:rc-release -DserverId=ossrh -DnexusUrl=https://oss.sonatype.org/ -DstagingRepositoryId=$REPOID 
      - release/execute_release:
          release_dir: ~/jars/release

workflows:
  version: 2.1
  build_pipeline:
    jobs:
      - build
      - hold:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - main
      - deploy:
          requires:
            - hold
          filters:
            branches:
              only:
                - main
